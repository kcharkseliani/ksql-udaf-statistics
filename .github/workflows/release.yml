name: Create and Build Release on Pull Request or Dispatch

on:
  push:
    branches:
      - dev
      - release/*
      - main
      
  workflow_dispatch:
    inputs:
      branch:
        description: 'Feature branch name'
        required: true
        default: 'feature/branch-name'

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the repository
    - name: Check out repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Step 2: Set up Java and Maven
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: 'gradle'

    # Step 3: Install GitVersion
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3.0.3
      with:
        versionSpec: '6.0.5'

    # Step 4: Run GitVersion to determine the majorMinorPatch, then tag if the branch is `main`
    - name: Get majorMinorPatch version with GitVersion before tagging on main
      if: github.ref == 'refs/heads/main'
      id: gitversion_main
      uses: gittools/actions/gitversion/execute@v3.0.3

    - name: Tag main branch immediately
      if: github.ref == 'refs/heads/main'
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a ${{ steps.gitversion_main.outputs.majorMinorPatch }} -m "Stable Release ${{ steps.gitversion_main.outputs.majorMinorPatch }}"
        git push origin ${{ steps.gitversion_main.outputs.majorMinorPatch }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Step 5: Run GitVersion to determine version (updated after tagging if first got version with main from Step 4)
    - name: Determine version with GitVersion
      uses: gittools/actions/gitversion/execute@v3.0.3
      id: gitversion

    # Step 6: Set version, run unit tests, build the project using shadowJar,
    #   and run integration tests (fails the pipeline if Docker is not available or tests fail)
    - name: Display Version
      run: echo "Version ${{ steps.gitversion.outputs.semVer }}"

    - name: Verify build and run all tests
      run: gradle verify -PbuildVersion='${{ steps.gitversion.outputs.semVer }}'

    # Step 7: Tag the commit with the version
    - name: Tag the commit with version
      if: startsWith(github.ref, 'refs/heads/release/')
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a ${{ steps.gitversion.outputs.semVer }} -m "Release ${{ steps.gitversion.outputs.semVer }}"
        git push origin ${{ steps.gitversion.outputs.semVer }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    # Step 8: Upload build artifact as a release
    - name: Create a GitHub release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.gitversion.outputs.semVer }}
        release_name: Release ${{ steps.gitversion.outputs.semVer }}
        draft: true
        prerelease: ${{ github.ref != 'refs/heads/main' }}

    # Step 9: Upload shadowJar .jar to release
    - name: Upload shadowJar to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: extensions/ksql-udaf-statistics-${{ steps.gitversion.outputs.semVer }}.jar
        asset_name: ksql-udaf-statistics-${{ steps.gitversion.outputs.semVer }}.jar
        asset_content_type: application/java-archive